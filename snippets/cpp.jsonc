{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New UObject": {
		"prefix": "UOBJECTnew",
		"body": [
			"// Fill out your copyright notice in the Description page of Project Settings.",
			"#pragma once",
			"",
			"#include \"CoreMinimal.h\"",
			"#include \"${TM_FILENAME_BASE}.generated.h\"",
			"",
			"UCLASS(BlueprintType, Category = \"$1\")",
			"class $2_API U${TM_FILENAME_BASE} : public UObject",
			"{",
			"\tGENERATED_BODY()",
			"\t",
			"public:",
			"\t",
			"\t$0",
			"}",
			"",
		]
	},
	"Dynamic Delegate": {
		"prefix": "DD0",
		"body": [
			"DECLARE_DYNAMIC_DELEGATE(F$0);"
		]
	},
	"Dynamic Delegate One Param": {
		"prefix": "DD1",
		"body": [
			"DECLARE_DYNAMIC_DELEGATE_OneParam(F$0, ${1}, ${2});"
		]
	},
	"Dynamic Delegate Two Params": {
		"prefix": "DD2",
		"body": [
			"DECLARE_DYNAMIC_DELEGATE_TwoParams(F$0, ${1}, ${2}, ${3}, ${4});"
		]
	},
	"Dynamic Multicast Delegate": {
		"prefix": "DM0",
		"body": [
			"DECLARE_DYNAMIC_MULTICAST_DELEGATE(F$0);"
		]
	},
	"Dynamic Multicast Delegate One Param": {
		"prefix": "DM1",
		"body": [
			"DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(F$0, ${1}, ${2});"
		]
	},
	"Dynamic Multicast Delegate Two Params": {
		"prefix": "DM2",
		"body": [
			"DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(F$0, ${1}, ${2}, ${3}, ${4});"
		]
	},
	"Add Dispatcher Property": {
		"prefix": "UPROPERTYdispatcher",
		"body": [
			"UPROPERTY(BlueprintAssignable)",
			"F${1} $0;"
		]
	},
	"UPROPERTY (Blueprint Read/Write)": {
		"prefix": "UPROPERTYpublic",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"$0\")"
		]
	},
	"UPROPERTY (Blueprint ReadOnly)": {
		"prefix": "UPROPERTYprivate",
		"body": [
			"UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"$0\")"
		]
	},
}
